import{aa as as,u as ls,o as pe,ap as hs,j as fe,ac as ds,D as us,ad as ps,af as fs,ag as ms,at as vs,ah as ys}from"./OrbitControls.740efb81.js";import{G as ws}from"./dat.gui.module.6914edc7.js";import{_ as xs,e as gs,f as bs,g as As,o as Bs,c as Es}from"./index.4f07409a.js";class Cs{constructor(){this.matrix={}}get(t,e){let{id:s}=t,{id:n}=e;if(n>s){const i=n;n=s,s=i}return`${s}-${n}`in this.matrix}set(t,e,s){let{id:n}=t,{id:i}=e;if(i>n){const o=i;i=n,n=o}s?this.matrix[`${n}-${i}`]=!0:delete this.matrix[`${n}-${i}`]}reset(){this.matrix={}}setNumObjects(t){}}class tt{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new tt);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],h=s[4],u=s[5],d=s[6],f=s[7],p=s[8],m=n[0],v=n[1],w=n[2],y=n[3],x=n[4],g=n[5],b=n[6],B=n[7],z=n[8];return i[0]=o*m+r*y+c*b,i[1]=o*v+r*x+c*B,i[2]=o*w+r*g+c*z,i[3]=a*m+h*y+u*b,i[4]=a*v+h*x+u*B,i[5]=a*w+h*g+u*z,i[6]=d*m+f*y+p*b,i[7]=d*v+f*x+p*B,i[8]=d*w+f*g+p*z,e}scale(t,e){e===void 0&&(e=new tt);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new l);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const a=c;let h;const u=4;let d;do{if(o=a-c,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){h=u;do d=u-h,i[d+n*o]+=i[d+n*r];while(--h);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];h=u;do d=u-h,i[d+n*r]=d<=o?0:i[d+n*r]-i[d+n*o]*f;while(--h)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new tt);const e=3,s=6,n=zs;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let a;const h=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){a=h;do u=h-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const d=n[i+s*o]/n[i+s*i];a=h;do u=h-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*d;while(--a)}}while(--r);i=2;do{o=i-1;do{const d=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*d;while(--a)}while(o--)}while(--i);i=2;do{const d=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*d;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,h=e*r,u=e*c,d=s*r,f=s*c,p=n*c,m=i*o,v=i*r,w=i*c,y=this.elements;return y[3*0+0]=1-(d+p),y[3*0+1]=h-w,y[3*0+2]=u+v,y[3*1+0]=h+w,y[3*1+1]=1-(a+p),y[3*1+2]=f-m,y[3*2+0]=u-v,y[3*2+1]=f+m,y[3*2+2]=1-(a+d),this}transpose(t){t===void 0&&(t=new tt);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const zs=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new l(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new l(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new tt([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new l);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ss,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=_s;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(me),me.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0);l.UNIT_X=new l(1,0,0);l.UNIT_Y=new l(0,1,0);l.UNIT_Z=new l(0,0,1);const Ss=new l,_s=new l,me=new l;class G{constructor(t){t===void 0&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,ve),a=ve),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new G().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,h=this.upperBound;t.copy(a),e.set(h.x,a.y,a.z),s.set(h.x,h.y,a.z),n.set(a.x,h.y,h.z),i.set(h.x,a.y,h.z),o.set(a.x,h.y,a.z),r.set(a.x,a.y,h.z),c.copy(h)}toLocalFrame(t,e){const s=ye,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ye,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],h=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,h,u);for(let d=0;d!==8;d++){const f=s[d];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,d=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,h)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,h)),Math.max(u,d));return!(p<0||f>p)}}const ve=new l,ye=[new l,new l,new l,new l,new l,new l,new l,new l];class ce{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class he{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class D{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Fs,n=Ms;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new D);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,h=t.w;return e.x=s*h+o*r+n*a-i*c,e.y=n*h+o*c+i*r-s*a,e.z=i*h+o*a+s*c-n*r,e.w=o*h-s*r-n*c-i*a,e}inverse(t){t===void 0&&(t=new D);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new D),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,h=a*s+r*i-c*n,u=a*n+c*s-o*i,d=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=h*a+f*-o+u*-c-d*-r,e.y=u*a+f*-r+d*-o-h*-c,e.z=d*a+f*-c+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,a=this.w;switch(e){case"YZX":const h=o*r+c*a;if(h>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,d=r*r,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-2*d-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),h=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):n==="YXZ"?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):n==="ZXY"?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):n==="ZYX"?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):n==="YZX"?(this.x=c*o*r+i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r-c*a*h):n==="XZY"&&(this.x=c*o*r-i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r+c*a*h),this}clone(){return new D(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new D);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,a=t.y,h=t.z,u=t.w,d,f,p,m,v;return f=n*c+i*a+o*h+r*u,f<0&&(f=-f,c=-c,a=-a,h=-h,u=-u),1-f>1e-6?(d=Math.acos(f),p=Math.sin(d),m=Math.sin((1-e)*d)/p,v=Math.sin(e*d)/p):(m=1-e,v=e),s.x=m*n+v*c,s.y=m*i+v*a,s.z=m*o+v*h,s.w=m*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new D);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,h=this.z,u=this.w,d=e*.5;return n.x+=d*(i*u+o*h-r*a),n.y+=d*(o*u+r*c-i*h),n.z+=d*(r*u+i*a-o*c),n.w+=d*(-i*c-o*a-r*h),n}}const Fs=new l,Ms=new l,Oe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class _{constructor(t){t===void 0&&(t={}),this.id=_.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}_.idCounter=0;_.types=Oe;class j{constructor(t){t===void 0&&(t={}),this.position=new l,this.quaternion=new D,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return j.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return j.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),s.vsub(t,n),e.conjugate(we),we.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const we=new D;class mt extends _{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:_.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const a=(c+1)%r;e[o[c]].vsub(e[o[a]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];mt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const h=new l;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const m=h.dot(o);m>d&&(d=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],v=new l;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,h=new l,u=new l,d=new l,f=new l,p=new l;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],a);const y=v.testSepAxis(a,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,o.copy(a))}else{const w=r?r.length:v.faces.length;for(let y=0;y<w;y++){const x=r?r[y]:y;a.copy(v.faceNormals[x]),s.vmult(a,a);const g=v.testSepAxis(a,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],h);const y=v.testSepAxis(h,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,o.copy(h))}else{const w=c?c.length:t.faces.length;for(let y=0;y<w;y++){const x=c?c[y]:y;h.copy(t.faceNormals[x]),i.vmult(h,h);const g=v.testSepAxis(h,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(h))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],d);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),d.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;mt.project(r,t,s,n,ee),mt.project(e,t,i,o,se);const c=ee[0],a=ee[1],h=se[0],u=se[1];if(c<u||h<a)return!1;const d=c-u,f=h-a;return d<f?d:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,h=new l,u=new l,d=new l,f=new l,p=new l,m=new l,v=this,w=[],y=n,x=w;let g=-1,b=Number.MAX_VALUE;for(let N=0;N<v.faces.length;N++){c.copy(v.faceNormals[N]),s.vmult(c,c);const P=c.dot(t);P<b&&(b=P,g=N)}if(g<0)return;const B=v.faces[g];B.connectedFaces=[];for(let N=0;N<v.faces.length;N++)for(let P=0;P<v.faces[N].length;P++)B.indexOf(v.faces[N][P])!==-1&&N!==g&&B.connectedFaces.indexOf(N)===-1&&B.connectedFaces.push(N);const z=B.length;for(let N=0;N<z;N++){const P=v.vertices[B[N]],W=v.vertices[B[(N+1)%z]];P.vsub(W,a),h.copy(a),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),f.copy(P),s.vmult(f,f),e.vadd(f,f);const A=B.connectedFaces[N];p.copy(this.faceNormals[A]);const F=this.getPlaneConstantOfFace(A);m.copy(p),s.vmult(m,m);const S=F-m.dot(e);for(this.clipFaceAgainstPlane(y,x,m,S);y.length;)y.shift();for(;x.length;)y.push(x.shift())}p.copy(this.faceNormals[g]);const I=this.getPlaneConstantOfFace(g);m.copy(p),s.vmult(m,m);const q=I-m.dot(e);for(let N=0;N<y.length;N++){let P=m.dot(y[N])+q;if(P<=i&&(console.log(`clamped: depth=${P} to minDist=${i}`),P=i),P<=o){const W=y[N];if(P<=1e-6){const A={point:W,normal:m,depth:P};r.push(A)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let h=0;h<r;h++){if(a=t[h],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,h,u,d=new l;for(let f=0;f<i.length;f++){d.copy(i[f]),e.vmult(d,d),t.vadd(d,d);const p=d;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(h===void 0||p.y>h)&&(h=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(a,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new l;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const a=e[s[r][0]],h=new l;t.vsub(a,h);const u=c.dot(h),d=new l;o.vsub(a,d);const f=c.dot(d);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ns;let c=0,a=0;const h=Ts,u=t.vertices;h.setZero(),j.vectorToLocalFrame(s,n,e,r),j.pointToLocalFrame(s,n,h,h);const d=h.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=d,c-=d,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const ee=[],se=[],Is=new l,Ns=new l,Ts=new l;class Nt extends _{constructor(t){super({type:_.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new mt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new l),Nt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)yt.set(i[o][0],i[o][1],i[o][2]),e.vmult(yt,yt),t.vadd(yt,yt),s(yt.x,yt.y,yt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;st[0].set(i.x,i.y,i.z),st[1].set(-i.x,i.y,i.z),st[2].set(-i.x,-i.y,i.z),st[3].set(-i.x,-i.y,-i.z),st[4].set(i.x,-i.y,-i.z),st[5].set(i.x,i.y,-i.z),st[6].set(-i.x,i.y,-i.z),st[7].set(i.x,-i.y,i.z);const o=st[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=st[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,h=c.y,u=c.z;a>n.x&&(n.x=a),h>n.y&&(n.y=h),u>n.z&&(n.z=u),a<s.x&&(s.x=a),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const yt=new l,st=[new l,new l,new l,new l,new l,new l,new l,new l],$t={DYNAMIC:1,STATIC:2,KINEMATIC:4},Zt={AWAKE:0,SLEEPY:1,SLEEPING:2};class M extends he{constructor(t){t===void 0&&(t={}),super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=M.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new D,this.initQuaternion=new D,this.previousQuaternion=new D,this.interpolatedQuaternion=new D,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new tt,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new tt,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new G,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=M.AWAKE,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===M.AWAKE&&s<n?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>n?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new D;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Ps,o=Rs,r=this.quaternion,c=this.aabb,a=qs;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),h===0?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ls,n=Ws;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=js;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;const s=ks,n=Os;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===M.DYNAMIC&&(this.sleepState===M.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=e,n=Hs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Gs;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;const s=Ds,n=Us;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Ys;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Nt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===M.DYNAMIC||this.type===M.KINEMATIC)||this.sleepState===M.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,h=this.invMass,u=this.invInertiaWorld,d=this.linearFactor,f=h*t;n.x+=r.x*f*d.x,n.y+=r.y*f*d.y,n.z+=r.z*f*d.z;const p=u.elements,m=this.angularFactor,v=c.x*m.x,w=c.y*m.y,y=c.z*m.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*y),i.y+=t*(p[3]*v+p[4]*w+p[5]*y),i.z+=t*(p[6]*v+p[7]*w+p[8]*y),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.idCounter=0;M.COLLIDE_EVENT_NAME="collide";M.DYNAMIC=$t.DYNAMIC;M.STATIC=$t.STATIC;M.KINEMATIC=$t.KINEMATIC;M.AWAKE=Zt.AWAKE;M.SLEEPY=Zt.SLEEPY;M.SLEEPING=Zt.SLEEPING;M.wakeupEvent={type:"wakeup"};M.sleepyEvent={type:"sleepy"};M.sleepEvent={type:"sleep"};const Ps=new l,Rs=new D,qs=new G,Ls=new tt,Ws=new tt,Vs=new tt,js=new l,ks=new l,Os=new l,Hs=new l,Gs=new l,Ds=new l,Us=new l,Ys=new l;class Kt{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&M.STATIC)!==0||t.sleepState===M.SLEEPING)&&((e.type&M.STATIC)!==0||e.sleepState===M.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Xs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=$s,n=Zs,i=Ks,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,h=c<a?`${c},${a}`:`${a},${c}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Xs=new l;new l;new D;new l;const $s={keys:[]},Zs=[],Ks=[];new l;class Qs extends Kt{constructor(t,e,s,n,i){t===void 0&&(t=new l(100,100,100)),e===void 0&&(e=new l(-100,-100,-100)),s===void 0&&(s=10),n===void 0&&(n=10),i===void 0&&(i=10),super(),this.nx=s,this.ny=n,this.nz=i,this.aabbMin=t,this.aabbMax=e;const o=this.nx*this.ny*this.nz;if(o<=0)throw"GridBroadphase: Each dimension's n must be >0";this.bins=[],this.binLengths=[],this.bins.length=o,this.binLengths.length=o;for(let r=0;r<o;r++)this.bins[r]=[],this.binLengths[r]=0}collisionPairs(t,e,s){const n=t.bodies.length,i=t.bodies,o=this.aabbMax,r=this.aabbMin,c=this.nx,a=this.ny,h=this.nz,u=a*h,d=h,f=1,p=o.x,m=o.y,v=o.z,w=r.x,y=r.y,x=r.z,g=c/(p-w),b=a/(m-y),B=h/(v-x),z=(p-w)/c,I=(m-y)/a,q=(v-x)/h,N=Math.sqrt(z*z+I*I+q*q)*.5,P=_.types,W=P.SPHERE,A=P.PLANE;P.BOX,P.COMPOUND,P.CONVEXPOLYHEDRON;const F=this.bins,S=this.binLengths,E=this.bins.length;for(let R=0;R!==E;R++)S[R]=0;const k=Math.ceil;function L(R,V,H,T,Z,K,Q){let Y=(R-w)*g|0,$=(V-y)*b|0,rt=(H-x)*B|0,ct=k((T-w)*g),at=k((Z-y)*b),lt=k((K-x)*B);Y<0?Y=0:Y>=c&&(Y=c-1),$<0?$=0:$>=a&&($=a-1),rt<0?rt=0:rt>=h&&(rt=h-1),ct<0?ct=0:ct>=c&&(ct=c-1),at<0?at=0:at>=a&&(at=a-1),lt<0?lt=0:lt>=h&&(lt=h-1),Y*=u,$*=d,rt*=f,ct*=u,at*=d,lt*=f;for(let Et=Y;Et<=ct;Et+=u)for(let Ct=$;Ct<=at;Ct+=d)for(let zt=rt;zt<=lt;zt+=f){const ue=Et+Ct+zt;F[ue][S[ue]++]=Q}}for(let R=0;R!==n;R++){const V=i[R],H=V.shapes[0];switch(H.type){case W:{const T=H,Z=V.position.x,K=V.position.y,Q=V.position.z,Y=T.radius;L(Z-Y,K-Y,Q-Y,Z+Y,K+Y,Q+Y,V);break}case A:{const T=H;T.worldNormalNeedsUpdate&&T.computeWorldNormal(V.quaternion);const Z=T.worldNormal,K=w+z*.5-V.position.x,Q=y+I*.5-V.position.y,Y=x+q*.5-V.position.z,$=Js;$.set(K,Q,Y);for(let rt=0,ct=0;rt!==c;rt++,ct+=u,$.y=Q,$.x+=z)for(let at=0,lt=0;at!==a;at++,lt+=d,$.z=Y,$.y+=I)for(let Et=0,Ct=0;Et!==h;Et++,Ct+=f,$.z+=q)if($.dot(Z)<N){const zt=ct+lt+Ct;F[zt][S[zt]++]=V}break}default:{V.aabbNeedsUpdate&&V.updateAABB(),L(V.aabb.lowerBound.x,V.aabb.lowerBound.y,V.aabb.lowerBound.z,V.aabb.upperBound.x,V.aabb.upperBound.y,V.aabb.upperBound.z,V);break}}}for(let R=0;R!==E;R++){const V=S[R];if(V>1){const H=F[R];for(let T=0;T!==V;T++){const Z=H[T];for(let K=0;K!==T;K++){const Q=H[K];this.needBroadphaseCollision(Z,Q)&&this.intersectionTest(Z,Q,e,s)}}}}this.makePairsUnique(e,s)}}const Js=new l;new l;class He extends Kt{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class It{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let Ge,De,Ue,Ye,Xe,$e,Ze;const Qt={CLOSEST:1,ANY:2,ALL:4};Ge=_.types.SPHERE;De=_.types.PLANE;Ue=_.types.BOX;Ye=_.types.CYLINDER;Xe=_.types.CONVEXPOLYHEDRON;$e=_.types.HEIGHTFIELD;Ze=_.types.TRIMESH;class U{get[Ge](){return this._intersectSphere}get[De](){return this._intersectPlane}get[Ue](){return this._intersectBox}get[Ye](){return this._intersectConvex}get[Xe](){return this._intersectConvex}get[$e](){return this._intersectHeightfield}get[Ze](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new l),e===void 0&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=U.ANY,this.result=new It,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||U.ANY,this.result=e.result||new It,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(xe),ne.length=0,t.broadphase.aabbQuery(t,xe,ne),this.intersectBodies(ne),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=tn,i=en;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(wn(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const h=new l;o.vsub(s,h);const u=h.dot(a);r.vsub(s,h);const d=h.dot(a);if(u*d>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,m=new l,v=new l;o.vsub(s,p);const w=-a.dot(p)/f;c.scale(w,m),o.vadd(m,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=sn;o.from.copy(this.from),o.to.copy(this.to),j.pointToLocalFrame(s,e,o.from,o.from),j.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=nn;let c,a,h,u;c=a=0,h=u=t.data.length-1;const d=new G;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<h;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,d),!!d.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),j.pointToWorldFrame(s,e,t.pillarOffset,Vt),this._intersectConvex(t.pillarConvex,e,Vt,n,i,ge),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),j.pointToWorldFrame(s,e,t.pillarOffset,Vt),this._intersectConvex(t.pillarConvex,e,Vt,n,i,ge)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,d=h**2-4*a*u,f=on,p=rn;if(!(d<0))if(d===0)o.lerp(r,d,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-h-Math.sqrt(d))/(2*a),v=(-h+Math.sqrt(d))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=cn,c=be,a=o&&o.faceList||null,h=t.faces,u=t.vertices,d=t.faceNormals,f=this.direction,p=this.from,m=this.to,v=p.distanceTo(m),w=a?a.length:h.length,y=this.result;for(let x=0;!y.shouldStop&&x<w;x++){const g=a?a[x]:x,b=h[g],B=d[g],z=e,I=s;c.copy(u[b[0]]),z.vmult(c,c),c.vadd(I,c),c.vsub(p,c),z.vmult(B,r);const q=f.dot(r);if(Math.abs(q)<this.precision)continue;const N=r.dot(c)/q;if(!(N<0)){f.scale(N,J),J.vadd(p,J),et.copy(u[b[0]]),z.vmult(et,et),I.vadd(et,et);for(let P=1;!y.shouldStop&&P<b.length-1;P++){nt.copy(u[b[P]]),it.copy(u[b[P+1]]),z.vmult(nt,nt),z.vmult(it,it),I.vadd(nt,nt),I.vadd(it,it);const W=J.distanceTo(p);!(U.pointInTriangle(J,et,nt,it)||U.pointInTriangle(J,nt,et,it))||W>v||this.reportIntersection(r,J,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=hn,c=vn,a=yn,h=be,u=dn,d=un,f=pn,p=mn,m=fn,v=t.indices;t.vertices;const w=this.from,y=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),j.vectorToLocalFrame(s,e,x,u),j.pointToLocalFrame(s,e,w,d),j.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,f.vsub(d,u),u.normalize();const g=d.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let b=0,B=c.length;!this.result.shouldStop&&b!==B;b++){const z=c[b];t.getNormal(z,r),t.getVertex(v[z*3],et),et.vsub(d,h);const I=u.dot(r),q=r.dot(h)/I;if(q<0)continue;u.scale(q,J),J.vadd(d,J),t.getVertex(v[z*3+1],nt),t.getVertex(v[z*3+2],it);const N=J.distanceSquared(d);!(U.pointInTriangle(J,nt,et,it)||U.pointInTriangle(J,et,nt,it))||N>g||(j.vectorToWorldFrame(e,r,m),j.pointToWorldFrame(s,e,J,p),this.reportIntersection(m,p,i,n,z))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case U.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case U.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case U.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,bt),s.vsub(e,Rt),t.vsub(e,ie);const i=bt.dot(bt),o=bt.dot(Rt),r=bt.dot(ie),c=Rt.dot(Rt),a=Rt.dot(ie);let h,u;return(h=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&h+u<i*c-o*o}}U.CLOSEST=Qt.CLOSEST;U.ANY=Qt.ANY;U.ALL=Qt.ALL;const xe=new G,ne=[],Rt=new l,ie=new l,tn=new l,en=new D,J=new l,et=new l,nt=new l,it=new l;new l;new It;const ge={faceList:[0]},Vt=new l,sn=new U,nn=[],on=new l,rn=new l,cn=new l,an=new l,ln=new l,be=new l,hn=new l,dn=new l,un=new l,pn=new l,fn=new l,mn=new l;new G;const vn=[],yn=new j,bt=new l,jt=new l;function wn(C,t,e){e.vsub(C,bt);const s=bt.dot(t);return t.scale(s,jt),jt.vadd(C,jt),e.distanceTo(jt)}class Ft extends Kt{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,c=n+o;return i-r<c}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,c;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const a=n[r];for(c=r+1;c<i;c++){const h=n[c];if(!!this.needBroadphaseCollision(a,h)){if(!Ft.checkBounds(a,h,o))break;this.intersectionTest(a,h,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?Ft.insertionSortX(t):e===1?Ft.insertionSortY(t):e===2&&Ft.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,c=r.length,a=1/c;for(let f=0;f!==c;f++){const p=r[f],m=p.position.x;t+=m,e+=m*m;const v=p.position.y;s+=v,n+=v*v;const w=p.position.z;i+=w,o+=w*w}const h=e-t*t*a,u=n-s*s*a,d=o-i*i*a;h>u?h>d?this.axisIndex=0:this.axisIndex=2:u>d?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const c=o[r];c.aabbNeedsUpdate&&c.updateAABB(),c.aabb.overlaps(e)&&s.push(c)}return s}}class Jt{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Tt{constructor(t,e,s){s===void 0&&(s={}),s=Jt.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Tt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Tt.idCounter=0;class ae{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class vt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=vt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ae,this.jacobianElementB=new ae,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,a=s.invMassSolve,h=n.invMassSolve;return i.scale(a,Ae),r.scale(h,Be),s.invInertiaWorldSolve.vmult(o,Ee),n.invInertiaWorldSolve.vmult(c,Ce),t.multiplyVectors(Ae,Ee)+e.multiplyVectors(Be,Ce)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,kt),a+=kt.dot(t.rotational),c.vmult(e.rotational,kt),a+=kt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=xn;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}vt.idCounter=0;const Ae=new l,Be=new l,Ee=new l,Ce=new l,kt=new l,xn=new l;class Mt extends vt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=gn,a=bn,h=n.velocity,u=n.angularVelocity;n.force,n.torque;const d=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=An,m=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,a),w.negate(m.spatial),c.negate(m.rotational),v.spatial.copy(w),v.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const y=w.dot(p),x=this.restitution+1,g=x*d.dot(w)-x*h.dot(w)+f.dot(a)-u.dot(c),b=this.computeGiMf();return-y*e-g*s-t*b}getImpactVelocityAlongNormal(){const t=Bn,e=En,s=Cn,n=zn,i=Sn;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const gn=new l,bn=new l,An=new l,Bn=new l,En=new l,Cn=new l,zn=new l,Sn=new l;class te extends Tt{constructor(t,e,s,n,i){e===void 0&&(e=new l),n===void 0&&(n=new l),i===void 0&&(i=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=n.clone();const o=this.equationX=new Mt(t,s),r=this.equationY=new Mt(t,s),c=this.equationZ=new Mt(t,s);this.equations.push(o,r,c),o.minForce=r.minForce=c.minForce=-i,o.maxForce=r.maxForce=c.maxForce=i,o.ni.set(1,0,0),r.ni.set(0,1,0),c.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,n=this.equationY,i=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj)}}class _n extends vt{constructor(t,e,s){s===void 0&&(s={});const n=typeof s.maxForce<"u"?s.maxForce:1e6;super(t,e,-n,n),this.axisA=s.axisA?s.axisA.clone():new l(1,0,0),this.axisB=s.axisB?s.axisB.clone():new l(0,1,0),this.angle=typeof s.angle<"u"?s.angle:0}computeB(t){const e=this.a,s=this.b,n=this.axisA,i=this.axisB,o=Fn,r=Mn,c=this.jacobianElementA,a=this.jacobianElementB;n.cross(i,o),i.cross(n,r),c.rotational.copy(r),a.rotational.copy(o);const h=Math.cos(this.angle)-n.dot(i),u=this.computeGW(),d=this.computeGiMf();return-h*e-u*s-t*d}}const Fn=new l,Mn=new l;class At extends vt{constructor(t,e,s){s===void 0&&(s={});const n=typeof s.maxForce<"u"?s.maxForce:1e6;super(t,e,-n,n),this.axisA=s.axisA?s.axisA.clone():new l(1,0,0),this.axisB=s.axisB?s.axisB.clone():new l(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,n=this.axisA,i=this.axisB,o=In,r=Nn,c=this.jacobianElementA,a=this.jacobianElementB;n.cross(i,o),i.cross(n,r),c.rotational.copy(r),a.rotational.copy(o);const h=Math.cos(this.maxAngle)-n.dot(i),u=this.computeGW(),d=this.computeGiMf();return-h*e-u*s-t*d}}const In=new l,Nn=new l;class Tn extends te{constructor(t,e,s){s===void 0&&(s={});const n=typeof s.maxForce<"u"?s.maxForce:1e6,i=s.pivotA?s.pivotA.clone():new l,o=s.pivotB?s.pivotB.clone():new l;super(t,i,e,o,n),this.axisA=s.axisA?s.axisA.clone():new l,this.axisB=s.axisB?s.axisB.clone():new l,this.collideConnected=!!s.collideConnected,this.angle=typeof s.angle<"u"?s.angle:0;const r=this.coneEquation=new _n(t,e,s),c=this.twistEquation=new At(t,e,s);this.twistAngle=typeof s.twistAngle<"u"?s.twistAngle:0,r.maxForce=0,r.minForce=-n,c.maxForce=0,c.minForce=-n,this.equations.push(r,c)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,n=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(n.axisA,n.axisA),t.vectorToWorldFrame(n.axisA,n.axisA),this.axisB.tangents(n.axisB,n.axisB),e.vectorToWorldFrame(n.axisB,n.axisB),s.angle=this.angle,n.maxAngle=this.twistAngle}}new l;new l;class Pn extends Tt{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new Mt(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}class Rn extends te{constructor(t,e,s){s===void 0&&(s={});const n=typeof s.maxForce<"u"?s.maxForce:1e6,i=new l,o=new l,r=new l;t.position.vadd(e.position,r),r.scale(.5,r),e.pointToLocalFrame(r,o),t.pointToLocalFrame(r,i),super(t,i,e,o,n),this.xA=t.vectorToLocalFrame(l.UNIT_X),this.xB=e.vectorToLocalFrame(l.UNIT_X),this.yA=t.vectorToLocalFrame(l.UNIT_Y),this.yB=e.vectorToLocalFrame(l.UNIT_Y),this.zA=t.vectorToLocalFrame(l.UNIT_Z),this.zB=e.vectorToLocalFrame(l.UNIT_Z);const c=this.rotationalEquation1=new At(t,e,s),a=this.rotationalEquation2=new At(t,e,s),h=this.rotationalEquation3=new At(t,e,s);this.equations.push(c,a,h)}update(){const t=this.bodyA,e=this.bodyB;this.motorEquation;const s=this.rotationalEquation1,n=this.rotationalEquation2,i=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,n.axisA),e.vectorToWorldFrame(this.zB,n.axisB),t.vectorToWorldFrame(this.zA,i.axisA),e.vectorToWorldFrame(this.xB,i.axisB)}}const qn=new l,Ln=new l;class Ke extends vt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,-s,s),this.axisA=new l,this.axisB=new l,this.targetVelocity=0}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.axisA,n=this.axisB,i=this.jacobianElementA,o=this.jacobianElementB;i.rotational.copy(s),n.negate(o.rotational);const r=this.computeGW()-this.targetVelocity,c=this.computeGiMf();return-r*e-t*c}}class Qe extends te{constructor(t,e,s){s===void 0&&(s={});const n=typeof s.maxForce<"u"?s.maxForce:1e6,i=s.pivotA?s.pivotA.clone():new l,o=s.pivotB?s.pivotB.clone():new l;super(t,i,e,o,n),(this.axisA=s.axisA?s.axisA.clone():new l(1,0,0)).normalize(),(this.axisB=s.axisB?s.axisB.clone():new l(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const a=this.rotationalEquation1=new At(t,e,s),h=this.rotationalEquation2=new At(t,e,s),u=this.motorEquation=new Ke(t,e,n);u.enabled=!1,this.equations.push(a,h,u)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,n=this.rotationalEquation1,i=this.rotationalEquation2,o=Wn,r=Vn,c=this.axisA,a=this.axisB;super.update(),t.quaternion.vmult(c,o),e.quaternion.vmult(a,r),o.tangents(n.axisA,i.axisA),n.axisB.copy(r),i.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const Wn=new l,Vn=new l;class le extends vt{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=jn,o=kn,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o);const h=this.computeGW(),u=this.computeGiMf();return-h*e-t*u}}const jn=new l,kn=new l;class Pt{constructor(t,e,s){s=Jt.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Pt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Pt.idCounter=0;class Bt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Bt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Bt.idCounter=0;class On{constructor(t,e,s){s===void 0&&(s={}),this.restLength=typeof s.restLength=="number"?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new l,this.localAnchorB=new l,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,n=this.bodyA,i=this.bodyB,o=Hn,r=Gn,c=Dn,a=Un,h=Jn,u=Yn,d=Xn,f=$n,p=Zn,m=Kn,v=Qn;this.getWorldAnchorA(u),this.getWorldAnchorB(d),u.vsub(n.position,f),d.vsub(i.position,p),d.vsub(u,o);const w=o.length();r.copy(o),r.normalize(),i.velocity.vsub(n.velocity,c),i.angularVelocity.cross(p,h),c.vadd(h,c),n.angularVelocity.cross(f,h),c.vsub(h,c),r.scale(-t*(w-s)-e*c.dot(r),a),n.force.vsub(a,n.force),i.force.vadd(a,i.force),f.cross(a,m),p.cross(a,v),n.torque.vsub(m,n.torque),i.torque.vadd(v,i.torque)}}const Hn=new l,Gn=new l,Dn=new l,Un=new l,Yn=new l,Xn=new l,$n=new l,Zn=new l,Kn=new l,Qn=new l,Jn=new l;class Je{constructor(t){t===void 0&&(t={}),t=Jt.defaults(t,{chassisConnectionPointLocal:new l,chassisConnectionPointWorld:new l,directionLocal:new l,directionWorld:new l,axleLocal:new l,axleWorld:new l,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new It,this.worldTransform=new j,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,Se),t.getVelocityAtWorldPoint(Se,ze);const n=e.hitNormalWorld.dot(ze);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const i=-1/s;this.suspensionRelativeVelocity=n*i,this.clippedInvContactDotSuspension=i}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const ze=new l,Se=new l;class ti{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new Je(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,n=this.chassisBody;for(let u=0;u<s;u++)this.updateWheelTransform(u);this.currentVehicleSpeedKmHour=3.6*n.velocity.length();const i=new l;this.getVehicleAxisWorld(this.indexForwardAxis,i),i.dot(n.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let u=0;u<s;u++)this.castRay(e[u]);this.updateSuspension(t);const o=new l,r=new l;for(let u=0;u<s;u++){const d=e[u];let f=d.suspensionForce;f>d.maxSuspensionForce&&(f=d.maxSuspensionForce),d.raycastResult.hitNormalWorld.scale(f*t,o),d.raycastResult.hitPointWorld.vsub(n.position,r),n.applyImpulse(o,r)}this.updateFriction(t);const c=new l,a=new l,h=new l;for(let u=0;u<s;u++){const d=e[u];n.getVelocityAtWorldPoint(d.chassisConnectionPointWorld,h);let f=1;switch(this.indexUpAxis){case 1:f=-1;break}if(d.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,a);const p=a.dot(d.raycastResult.hitNormalWorld);d.raycastResult.hitNormalWorld.scale(p,c),a.vsub(c,a);const m=a.dot(h);d.deltaRotation=f*m*t/d.radius}(d.sliding||!d.isInContact)&&d.engineForce!==0&&d.useCustomSlidingRotationalSpeed&&(d.deltaRotation=(d.engineForce>0?1:-1)*d.customSlidingRotationalSpeed*t),Math.abs(d.brake)>Math.abs(d.engineForce)&&(d.deltaRotation=0),d.rotation+=d.deltaRotation,d.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,n=this.wheelInfos,i=n.length;for(let o=0;o<i;o++){const r=n[o];if(r.isInContact){let c;const a=r.suspensionRestLength,h=r.suspensionLength,u=a-h;c=r.suspensionStiffness*u*r.clippedInvContactDotSuspension;const d=r.suspensionRelativeVelocity;let f;d<0?f=r.dampingCompression:f=r.dampingRelaxation,c-=f*d,r.suspensionForce=c*s,r.suspensionForce<0&&(r.suspensionForce=0)}else r.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=ii,s=oi;this.updateWheelTransformWorld(t);const n=this.chassisBody;let i=-1;const o=t.suspensionRestLength+t.radius;t.directionWorld.scale(o,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const c=t.raycastResult;c.reset();const a=n.collisionResponse;n.collisionResponse=!1,this.world.rayTest(r,s,c),n.collisionResponse=a;const h=c.body;if(t.raycastResult.groundObject=0,h){i=c.distance,t.raycastResult.hitNormalWorld=c.hitNormalWorld,t.isInContact=!0;const u=c.distance;t.suspensionLength=u-t.radius;const d=t.suspensionRestLength-t.maxSuspensionTravel,f=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<d&&(t.suspensionLength=d),t.suspensionLength>f&&(t.suspensionLength=f,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new l;n.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const v=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const w=-1/p;t.suspensionRelativeVelocity=v*w,t.clippedInvContactDotSuspension=w}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return i}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=ei,s=si,n=ni,i=this.wheelInfos[t];this.updateWheelTransformWorld(i),i.directionLocal.scale(-1,e),s.copy(i.axleLocal),e.cross(s,n),n.normalize(),s.normalize();const o=i.steering,r=new D;r.setFromAxisAngle(e,o);const c=new D;c.setFromAxisAngle(s,i.rotation);const a=i.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,a),a.mult(c,a),a.normalize();const h=i.worldTransform.position;h.copy(i.directionWorld),h.scale(i.suspensionLength,h),h.vadd(i.chassisConnectionPointWorld,h)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=ci,s=this.wheelInfos,n=s.length,i=this.chassisBody,o=li,r=ai;this.numWheelsOnGround=0;for(let h=0;h<n;h++){const u=s[h];u.raycastResult.body&&this.numWheelsOnGround++,u.sideImpulse=0,u.forwardImpulse=0,o[h]||(o[h]=new l),r[h]||(r[h]=new l)}for(let h=0;h<n;h++){const u=s[h],d=u.raycastResult.body;if(d){const f=r[h];this.getWheelTransformWorld(h).vectorToWorldFrame(ri[this.indexRightAxis],f);const m=u.raycastResult.hitNormalWorld,v=f.dot(m);m.scale(v,e),f.vsub(e,f),f.normalize(),m.cross(f,o[h]),o[h].normalize(),u.sideImpulse=Ai(i,u.raycastResult.hitPointWorld,d,u.raycastResult.hitPointWorld,f),u.sideImpulse*=hi}}const c=1,a=.5;this.sliding=!1;for(let h=0;h<n;h++){const u=s[h],d=u.raycastResult.body;let f=0;if(u.slipInfo=1,d){const m=u.brake?u.brake:0;f=fi(i,d,u.raycastResult.hitPointWorld,o[h],m),f+=u.engineForce*t;const v=m/f;u.slipInfo*=v}if(u.forwardImpulse=0,u.skidInfo=1,d){u.skidInfo=1;const p=u.suspensionForce*t*u.frictionSlip,v=p*p;u.forwardImpulse=f;const w=u.forwardImpulse*a/u.forwardAcceleration,y=u.sideImpulse*c/u.sideAcceleration,x=w*w+y*y;if(u.sliding=!1,x>v){this.sliding=!0,u.sliding=!0;const g=p/Math.sqrt(x);u.skidInfo*=g}}}if(this.sliding)for(let h=0;h<n;h++){const u=s[h];u.sideImpulse!==0&&u.skidInfo<1&&(u.forwardImpulse*=u.skidInfo,u.sideImpulse*=u.skidInfo)}for(let h=0;h<n;h++){const u=s[h],d=new l;if(u.raycastResult.hitPointWorld.vsub(i.position,d),u.forwardImpulse!==0){const f=new l;o[h].scale(u.forwardImpulse,f),i.applyImpulse(f,d)}if(u.sideImpulse!==0){const f=u.raycastResult.body,p=new l;u.raycastResult.hitPointWorld.vsub(f.position,p);const m=new l;r[h].scale(u.sideImpulse,m),i.vectorToLocalFrame(d,d),d["xyz"[this.indexUpAxis]]*=u.rollInfluence,i.vectorToWorldFrame(d,d),i.applyImpulse(m,d),m.scale(-1,m),f.applyImpulse(m,p)}}}}new l;new l;new l;const ei=new l,si=new l,ni=new l;new U;new l;const ii=new l,oi=new l,ri=[new l(1,0,0),new l(0,1,0),new l(0,0,1)],ci=new l,ai=[],li=[],hi=1,di=new l,ui=new l,pi=new l;function fi(C,t,e,s,n){let i=0;const o=e,r=di,c=ui,a=pi;C.getVelocityAtWorldPoint(o,r),t.getVelocityAtWorldPoint(o,c),r.vsub(c,a);const h=s.dot(a),u=_e(C,e,s),d=_e(t,e,s),p=1/(u+d);return i=-h*p,n<i&&(i=n),i<-n&&(i=-n),i}const mi=new l,vi=new l,yi=new l,wi=new l;function _e(C,t,e){const s=mi,n=vi,i=yi,o=wi;return t.vsub(C.position,s),s.cross(e,n),C.invInertiaWorld.vmult(n,o),o.cross(s,i),C.invMass+e.dot(i)}const xi=new l,gi=new l,bi=new l;function Ai(C,t,e,s,n){if(n.lengthSquared()>1.1)return 0;const o=xi,r=gi,c=bi;C.getVelocityAtWorldPoint(t,o),e.getVelocityAtWorldPoint(s,r),o.vsub(r,c);const a=n.dot(c),h=.2,u=1/(C.invMass+e.invMass);return-h*a*u}class ts extends _{constructor(t){if(super({type:_.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}class Bi{constructor(t){t===void 0&&(t={}),this.wheelBodies=[],this.coordinateSystem=typeof t.coordinateSystem<"u"?t.coordinateSystem.clone():new l(1,2,3),t.chassisBody?this.chassisBody=t.chassisBody:this.chassisBody=new M({mass:1,shape:new Nt(new l(5,.5,2))}),this.constraints=[],this.wheelAxes=[],this.wheelForces=[]}addWheel(t){t===void 0&&(t={});let e;t.body?e=t.body:e=new M({mass:1,shape:new ts(1.2)}),this.wheelBodies.push(e),this.wheelForces.push(0);const s=typeof t.position<"u"?t.position.clone():new l,n=new l;this.chassisBody.pointToWorldFrame(s,n),e.position.set(n.x,n.y,n.z);const i=typeof t.axis<"u"?t.axis.clone():new l(0,0,1);this.wheelAxes.push(i);const o=new Qe(this.chassisBody,e,{pivotA:s,axisA:i,pivotB:l.ZERO,axisB:i,collideConnected:!1});return this.constraints.push(o),this.wheelBodies.length-1}setSteeringValue(t,e){const s=this.wheelAxes[e],n=Math.cos(t),i=Math.sin(t),o=s.x,r=s.z;this.constraints[e].axisA.set(-n*o+i*r,0,i*o+n*r)}setMotorSpeed(t,e){const s=this.constraints[e];s.enableMotor(),s.motorTargetVelocity=t}disableMotor(t){this.constraints[t].disableMotor()}setWheelForce(t,e){this.wheelForces[e]=t}applyWheelForce(t,e){const s=this.wheelAxes[e],n=this.wheelBodies[e],i=n.torque;s.scale(t,Ot),n.vectorToWorldFrame(Ot,Ot),i.vadd(Ot,i)}addToWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let n=0;n<s.length;n++)t.addBody(s[n]);for(let n=0;n<e.length;n++)t.addConstraint(e[n]);t.addEventListener("preStep",this._update.bind(this))}_update(){const t=this.wheelForces;for(let e=0;e<t.length;e++)this.applyWheelForce(t[e],e)}removeFromWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let n=0;n<s.length;n++)t.removeBody(s[n]);for(let n=0;n<e.length;n++)t.removeConstraint(e[n])}getWheelSpeed(t){const e=this.wheelAxes[t],n=this.wheelBodies[t].angularVelocity;return this.chassisBody.vectorToWorldFrame(e,Fe),n.dot(Fe)}}const Ot=new l,Fe=new l;class Ei{constructor(){this.particles=[],this.density=1,this.smoothingRadius=1,this.speedOfSound=1,this.viscosity=.01,this.eps=1e-6,this.pressures=[],this.densities=[],this.neighbors=[]}add(t){this.particles.push(t),this.neighbors.length<this.particles.length&&this.neighbors.push([])}remove(t){const e=this.particles.indexOf(t);e!==-1&&(this.particles.splice(e,1),this.neighbors.length>this.particles.length&&this.neighbors.pop())}getNeighbors(t,e){const s=this.particles.length,n=t.id,i=this.smoothingRadius*this.smoothingRadius,o=Ci;for(let r=0;r!==s;r++){const c=this.particles[r];c.position.vsub(t.position,o),n!==c.id&&o.lengthSquared()<i&&e.push(c)}}update(){const t=this.particles.length,e=zi,s=this.speedOfSound,n=this.eps;for(let h=0;h!==t;h++){const u=this.particles[h],d=this.neighbors[h];d.length=0,this.getNeighbors(u,d),d.push(this.particles[h]);const f=d.length;let p=0;for(let m=0;m!==f;m++){u.position.vsub(d[m].position,e);const v=e.length(),w=this.w(v);p+=d[m].mass*w}this.densities[h]=p,this.pressures[h]=s*s*(this.densities[h]-this.density)}const i=Si,o=_i,r=Fi,c=Mi,a=Ii;for(let h=0;h!==t;h++){const u=this.particles[h];i.set(0,0,0),o.set(0,0,0);let d,f;const p=this.neighbors[h],m=p.length;for(let v=0;v!==m;v++){const w=p[v];u.position.vsub(w.position,c);const y=c.length();d=-w.mass*(this.pressures[h]/(this.densities[h]*this.densities[h]+n)+this.pressures[v]/(this.densities[v]*this.densities[v]+n)),this.gradw(c,r),r.scale(d,r),i.vadd(r,i),w.velocity.vsub(u.velocity,a),a.scale(1/(1e-4+this.densities[h]*this.densities[v])*this.viscosity*w.mass,a),f=this.nablaw(y),a.scale(f,a),o.vadd(a,o)}o.scale(u.mass,o),i.scale(u.mass,i),u.force.vadd(o,u.force),u.force.vadd(i,u.force)}}w(t){const e=this.smoothingRadius;return 315/(64*Math.PI*e**9)*(e*e-t*t)**3}gradw(t,e){const s=t.length(),n=this.smoothingRadius;t.scale(945/(32*Math.PI*n**9)*(n*n-s*s)**2,e)}nablaw(t){const e=this.smoothingRadius;return 945/(32*Math.PI*e**9)*(e*e-t*t)*(7*t*t-3*e*e)}}const Ci=new l,zi=new l,Si=new l,_i=new l,Fi=new l,Mi=new l,Ii=new l;class Ni extends mt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],c=[],a=[],h=[],u=Math.cos,d=Math.sin;o.push(new l(-e*d(0),-s*.5,e*u(0))),a.push(0),o.push(new l(-t*d(0),s*.5,t*u(0))),h.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),v=2*Math.PI/i*(p+.5);p<i-1?(o.push(new l(-e*d(m),-s*.5,e*u(m))),a.push(2*p+2),o.push(new l(-t*d(m),s*.5,t*u(m))),h.push(2*p+3),c.push([2*p,2*p+1,2*p+3,2*p+2])):c.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new l(-d(v),0,u(v)))}c.push(a),r.push(new l(0,1,0));const f=[];for(let p=0;p<h.length;p++)f.push(h[h.length-p-1]);c.push(f),super({vertices:o,faces:c,axes:r}),this.type=_.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}class Ti extends _{constructor(){super({type:_.types.PARTICLE})}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,n){s.copy(t),n.copy(t)}}class es extends _{constructor(){super({type:_.types.PLANE}),this.worldNormal=new l,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){ht.set(0,0,1),e.vmult(ht,ht);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),ht.x===1?n.x=t.x:ht.x===-1&&(s.x=t.x),ht.y===1?n.y=t.y:ht.y===-1&&(s.y=t.y),ht.z===1?n.z=t.z:ht.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ht=new l;class Pi extends _{constructor(t,e){e===void 0&&(e={}),e=Jt.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:_.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,e.minValue===null&&this.updateMinValue(),e.maxValue===null&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new mt,this.pillarOffset=new l,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i<e&&(e=i)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let n=0;n!==t[s].length;n++){const i=t[s][n];i>e&&(e=i)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const n=this.data;n[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,n,i){i===void 0&&(i=[]);const o=this.data;let r=this.minValue;for(let c=t;c<=s;c++)for(let a=e;a<=n;a++){const h=o[c][a];h>r&&(r=h)}i[0]=this.minValue,i[1]=r}getIndexOfPosition(t,e,s,n){const i=this.elementSize,o=this.data;let r=Math.floor(t/i),c=Math.floor(e/i);return s[0]=r,s[1]=c,n&&(r<0&&(r=0),c<0&&(c=0),r>=o.length-1&&(r=o.length-1),c>=o[0].length-1&&(c=o[0].length-1)),!(r<0||c<0||r>=o.length-1||c>=o[0].length-1)}getTriangleAt(t,e,s,n,i,o){const r=Me;this.getIndexOfPosition(t,e,r,s);let c=r[0],a=r[1];const h=this.data;s&&(c=Math.min(h.length-2,Math.max(0,c)),a=Math.min(h[0].length-2,Math.max(0,a)));const u=this.elementSize,d=(t/u-c)**2+(e/u-a)**2,f=(t/u-(c+1))**2+(e/u-(a+1))**2,p=d>f;return this.getTriangle(c,a,p,n,i,o),p}getNormalAt(t,e,s,n){const i=Wi,o=Vi,r=ji,c=ki,a=Oi;this.getTriangleAt(t,e,s,i,o,r),o.vsub(i,c),r.vsub(i,a),c.cross(a,n),n.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:n,upperBound:i}=s;const o=this.data,r=this.elementSize;n.set(t*r,e*r,o[t][e]),i.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const n=this.data,i=Ri,o=qi,r=Li,c=Me;this.getIndexOfPosition(t,e,c,s);let a=c[0],h=c[1];s&&(a=Math.min(n.length-2,Math.max(0,a)),h=Math.min(n[0].length-2,Math.max(0,h)));const u=this.getTriangleAt(t,e,s,i,o,r);Hi(t,e,i.x,i.y,o.x,o.y,r.x,r.y,Ie);const d=Ie;return u?n[a+1][h+1]*d.x+n[a][h+1]*d.y+n[a+1][h]*d.z:n[a][h]*d.x+n[a+1][h]*d.y+n[a][h+1]*d.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,n,i){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:n,offset:i}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,n,i,o){const r=this.data,c=this.elementSize;s?(n.set((t+1)*c,(e+1)*c,r[t+1][e+1]),i.set(t*c,(e+1)*c,r[t][e+1]),o.set((t+1)*c,e*c,r[t+1][e])):(n.set(t*c,e*c,r[t][e]),i.set((t+1)*c,e*c,r[t+1][e]),o.set(t*c,(e+1)*c,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let n=this.pillarConvex,i=this.pillarOffset;if(this.cacheEnabled){const u=this.getCachedConvexTrianglePillar(t,e,s);if(u){this.pillarConvex=u.convex,this.pillarOffset=u.offset;return}n=new mt,i=new l,this.pillarConvex=n,this.pillarOffset=i}const o=this.data,r=this.elementSize,c=n.faces;n.vertices.length=6;for(let u=0;u<6;u++)n.vertices[u]||(n.vertices[u]=new l);c.length=5;for(let u=0;u<5;u++)c[u]||(c[u]=[]);const a=n.vertices,h=(Math.min(o[t][e],o[t+1][e],o[t][e+1],o[t+1][e+1])-this.minValue)/2+this.minValue;s?(i.set((t+.75)*r,(e+.75)*r,h),a[0].set(.25*r,.25*r,o[t+1][e+1]-h),a[1].set(-.75*r,.25*r,o[t][e+1]-h),a[2].set(.25*r,-.75*r,o[t+1][e]-h),a[3].set(.25*r,.25*r,-Math.abs(h)-1),a[4].set(-.75*r,.25*r,-Math.abs(h)-1),a[5].set(.25*r,-.75*r,-Math.abs(h)-1),c[0][0]=0,c[0][1]=1,c[0][2]=2,c[1][0]=5,c[1][1]=4,c[1][2]=3,c[2][0]=2,c[2][1]=5,c[2][2]=3,c[2][3]=0,c[3][0]=3,c[3][1]=4,c[3][2]=1,c[3][3]=0,c[4][0]=1,c[4][1]=4,c[4][2]=5,c[4][3]=2):(i.set((t+.25)*r,(e+.25)*r,h),a[0].set(-.25*r,-.25*r,o[t][e]-h),a[1].set(.75*r,-.25*r,o[t+1][e]-h),a[2].set(-.25*r,.75*r,o[t][e+1]-h),a[3].set(-.25*r,-.25*r,-Math.abs(h)-1),a[4].set(.75*r,-.25*r,-Math.abs(h)-1),a[5].set(-.25*r,.75*r,-Math.abs(h)-1),c[0][0]=0,c[0][1]=1,c[0][2]=2,c[1][0]=5,c[1][1]=4,c[1][2]=3,c[2][0]=0,c[2][1]=2,c[2][2]=5,c[2][3]=3,c[3][0]=1,c[3][1]=0,c[3][2]=3,c[3][3]=4,c[4][0]=4,c[4][1]=5,c[4][2]=2,c[4][3]=1),n.computeNormals(),n.computeEdges(),n.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,n,i)}calculateLocalInertia(t,e){return e===void 0&&(e=new l),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),n.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new l(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:n,y:i}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const c=r.getImageData(0,0,t.width,t.height),a=this.data;a.length=0,this.elementSize=Math.abs(s)/c.width;for(let h=0;h<c.height;h++){const u=[];for(let d=0;d<c.width;d++){const f=c.data[(h*c.height+d)*4],p=c.data[(h*c.height+d)*4+1],m=c.data[(h*c.height+d)*4+2],v=(f+p+m)/4/255*n;s<0?u.push(v):u.unshift(v)}i<0?a.unshift(u):a.push(u)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const Me=[],Ie=new l,Ri=new l,qi=new l,Li=new l,Wi=new l,Vi=new l,ji=new l,ki=new l,Oi=new l;function Hi(C,t,e,s,n,i,o,r,c){c.x=((i-r)*(C-o)+(o-n)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),c.y=((r-s)*(C-o)+(e-o)*(t-r))/((i-r)*(e-o)+(o-n)*(s-r)),c.z=1-c.x-c.y}class ot{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new G,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,o=this.maxDepth||this.root.maxDepth;if(s<o){let r=!1;i.length||(this.subdivide(),r=!0);for(let c=0;c!==8;c++)if(i[c].insert(t,e,s+1))return!0;r&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new ot({aabb:new G({lowerBound:new l(0,0,0)})}),new ot({aabb:new G({lowerBound:new l(1,0,0)})}),new ot({aabb:new G({lowerBound:new l(1,1,0)})}),new ot({aabb:new G({lowerBound:new l(1,1,1)})}),new ot({aabb:new G({lowerBound:new l(0,1,1)})}),new ot({aabb:new G({lowerBound:new l(0,0,1)})}),new ot({aabb:new G({lowerBound:new l(1,0,1)})}),new ot({aabb:new G({lowerBound:new l(0,1,0)})})),s.vsub(e,wt),wt.scale(.5,wt);const i=this.root||this;for(let o=0;o!==8;o++){const r=n[o];r.root=i;const c=r.aabb.lowerBound;c.x*=wt.x,c.y*=wt.y,c.z*=wt.z,c.vadd(e,c),c.vadd(wt,r.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(Ht),Ht.toLocalFrame(e,Ht),this.aabbQuery(Ht,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class Gi extends ot{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const wt=new l,Ht=new G;class Xt extends _{constructor(t,e){super({type:_.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new G,this.edges=null,this.scale=new l(1,1,1),this.tree=new Gi,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new G,n=new l,i=new l,o=new l,r=[n,i,o];for(let c=0;c<this.indices.length/3;c++){const a=c*3;this._getUnscaledVertex(this.indices[a],n),this._getUnscaledVertex(this.indices[a+1],i),this._getUnscaledVertex(this.indices[a+2],o),s.setFromPoints(r),t.insert(s,c)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){Gt.copy(t);const s=this.scale,n=s.x,i=s.y,o=s.z,r=Gt.lowerBound,c=Gt.upperBound;return r.x/=n,r.y/=i,r.z/=o,c.x/=n,c.y/=i,c.z/=o,this.tree.aabbQuery(Gt,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=Di,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],o=this.indices[n+1],r=this.indices[n+2];this.getVertex(i,Pe),this.getVertex(o,Re),this.getVertex(r,qe),Xt.computeNormal(Re,Pe,qe,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const o=n<i?`${n}_${i}`:`${i}_${n}`;t[o]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,o=this.indices[i],r=this.indices[i+1],c=this.indices[i+2];e(o,r),e(r,c),e(c,o)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=Ui,n=Yi;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,Te),s.vsub(e,Ne),Ne.cross(Te,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),j.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(xt);const s=xt.upperBound.x-xt.lowerBound.x,n=xt.upperBound.y-xt.lowerBound.y,i=xt.upperBound.z-xt.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=Xi;this.getVertex(0,i),e.copy(i),s.copy(i);for(let o=0;o!==n;o++)this.getVertex(o,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new l;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const o=s.lengthSquared();o>t&&(t=o)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=$i,o=Zi;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,o),s.copy(o.lowerBound),n.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const o=[],r=[];for(let c=0;c<=s;c++)for(let a=0;a<=n;a++){const h=a/n*i,u=c/s*Math.PI*2,d=(t+e*Math.cos(u))*Math.cos(h),f=(t+e*Math.cos(u))*Math.sin(h),p=e*Math.sin(u);o.push(d,f,p)}for(let c=1;c<=s;c++)for(let a=1;a<=n;a++){const h=(n+1)*c+a-1,u=(n+1)*(c-1)+a-1,d=(n+1)*(c-1)+a,f=(n+1)*c+a;r.push(h,u,f),r.push(u,d,f)}return new Xt(o,r)}}const Di=new l,Gt=new G,Ui=new l,Yi=new l,Ne=new l,Te=new l,Pe=new l,Re=new l,qe=new l,xt=new G,Xi=new l,$i=new j,Zi=new G;class de{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class ss extends de{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,h=t;let u,d,f,p,m,v;if(r!==0)for(let g=0;g!==a;g++)c[g].updateSolveMassProperties();const w=Qi,y=Ji,x=Ki;w.length=r,y.length=r,x.length=r;for(let g=0;g!==r;g++){const b=o[g];x[g]=0,y[g]=b.computeB(h),w[g]=1/b.computeC()}if(r!==0){for(let B=0;B!==a;B++){const z=c[B],I=z.vlambda,q=z.wlambda;I.set(0,0,0),q.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let B=0;B!==r;B++){const z=o[B];u=y[B],d=w[B],v=x[B],m=z.computeGWlambda(),f=d*(u-m-z.eps*v),v+f<z.minForce?f=z.minForce-v:v+f>z.maxForce&&(f=z.maxForce-v),x[B]+=f,p+=f>0?f:-f,z.addToWlambda(f)}if(p*p<i)break}for(let B=0;B!==a;B++){const z=c[B],I=z.velocity,q=z.angularVelocity;z.vlambda.vmul(z.linearFactor,z.vlambda),I.vadd(z.vlambda,I),z.wlambda.vmul(z.angularFactor,z.wlambda),q.vadd(z.wlambda,q)}let g=o.length;const b=1/h;for(;g--;)o[g].multiplier=x[g]*b}return s}}const Ki=[],Qi=[],Ji=[];class to extends de{constructor(t){for(super(),this.iterations=10,this.tolerance=1e-7,this.subsolver=t,this.nodes=[],this.nodePool=[];this.nodePool.length<128;)this.nodePool.push(this.createNode())}createNode(){return{body:null,children:[],eqs:[],visited:!1}}solve(t,e){const s=eo,n=this.nodePool,i=e.bodies,o=this.equations,r=o.length,c=i.length,a=this.subsolver;for(;n.length<c;)n.push(this.createNode());s.length=c;for(let p=0;p<c;p++)s[p]=n[p];for(let p=0;p!==c;p++){const m=s[p];m.body=i[p],m.children.length=0,m.eqs.length=0,m.visited=!1}for(let p=0;p!==r;p++){const m=o[p],v=i.indexOf(m.bi),w=i.indexOf(m.bj),y=s[v],x=s[w];y.children.push(x),y.eqs.push(m),x.children.push(y),x.eqs.push(m)}let h,u=0,d=so;a.tolerance=this.tolerance,a.iterations=this.iterations;const f=no;for(;h=ns(s);){d.length=0,f.bodies.length=0,oo(h,ro,f.bodies,d);const p=d.length;d=d.sort(co);for(let m=0;m!==p;m++)a.addEquation(d[m]);a.solve(t,f),a.removeAllEquations(),u++}return u}}const eo=[],so=[],no={bodies:[]},io=M.STATIC;function ns(C){const t=C.length;for(let e=0;e!==t;e++){const s=C[e];if(!s.visited&&!(s.body.type&io))return s}return!1}const Dt=[];function oo(C,t,e,s){for(Dt.push(C),C.visited=!0,t(C,e,s);Dt.length;){const n=Dt.pop();let i;for(;i=ns(n.children);)i.visited=!0,t(i,e,s),Dt.push(i)}}function ro(C,t,e){t.push(C.body);const s=C.eqs.length;for(let n=0;n!==s;n++){const i=C.eqs[n];e.includes(i)||e.push(i)}}function co(C,t){return t.id-C.id}class is{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class os extends is{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const O={sphereSphere:_.types.SPHERE,spherePlane:_.types.SPHERE|_.types.PLANE,boxBox:_.types.BOX|_.types.BOX,sphereBox:_.types.SPHERE|_.types.BOX,planeBox:_.types.PLANE|_.types.BOX,convexConvex:_.types.CONVEXPOLYHEDRON,sphereConvex:_.types.SPHERE|_.types.CONVEXPOLYHEDRON,planeConvex:_.types.PLANE|_.types.CONVEXPOLYHEDRON,boxConvex:_.types.BOX|_.types.CONVEXPOLYHEDRON,sphereHeightfield:_.types.SPHERE|_.types.HEIGHTFIELD,boxHeightfield:_.types.BOX|_.types.HEIGHTFIELD,convexHeightfield:_.types.CONVEXPOLYHEDRON|_.types.HEIGHTFIELD,sphereParticle:_.types.PARTICLE|_.types.SPHERE,planeParticle:_.types.PLANE|_.types.PARTICLE,boxParticle:_.types.BOX|_.types.PARTICLE,convexParticle:_.types.PARTICLE|_.types.CONVEXPOLYHEDRON,cylinderCylinder:_.types.CYLINDER,sphereCylinder:_.types.SPHERE|_.types.CYLINDER,planeCylinder:_.types.PLANE|_.types.CYLINDER,boxCylinder:_.types.BOX|_.types.CYLINDER,convexCylinder:_.types.CONVEXPOLYHEDRON|_.types.CYLINDER,heightfieldCylinder:_.types.HEIGHTFIELD|_.types.CYLINDER,particleCylinder:_.types.PARTICLE|_.types.CYLINDER,sphereTrimesh:_.types.SPHERE|_.types.TRIMESH,planeTrimesh:_.types.PLANE|_.types.TRIMESH};class rs{get[O.sphereSphere](){return this.sphereSphere}get[O.spherePlane](){return this.spherePlane}get[O.boxBox](){return this.boxBox}get[O.sphereBox](){return this.sphereBox}get[O.planeBox](){return this.planeBox}get[O.convexConvex](){return this.convexConvex}get[O.sphereConvex](){return this.sphereConvex}get[O.planeConvex](){return this.planeConvex}get[O.boxConvex](){return this.boxConvex}get[O.sphereHeightfield](){return this.sphereHeightfield}get[O.boxHeightfield](){return this.boxHeightfield}get[O.convexHeightfield](){return this.convexHeightfield}get[O.sphereParticle](){return this.sphereParticle}get[O.planeParticle](){return this.planeParticle}get[O.boxParticle](){return this.boxParticle}get[O.convexParticle](){return this.convexParticle}get[O.cylinderCylinder](){return this.convexConvex}get[O.sphereCylinder](){return this.sphereConvex}get[O.planeCylinder](){return this.planeConvex}get[O.boxCylinder](){return this.boxConvex}get[O.convexCylinder](){return this.convexConvex}get[O.heightfieldCylinder](){return this.heightfieldCylinder}get[O.particleCylinder](){return this.particleCylinder}get[O.sphereTrimesh](){return this.sphereTrimesh}get[O.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new os,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Mt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,h=n.material||e.material;return a&&h&&a.restitution>=0&&h.restitution>=0&&(r.restitution=a.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const h=i.material||s.material,u=o.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(a=h.friction*u.friction),a>0){const d=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new le(s,n,d*f),v=p.length?p.pop():new le(s,n,d*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-d*f,m.maxForce=v.maxForce=d*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];gt.setZero(),St.setZero(),_t.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(gt.vadd(e.ni,gt),St.vadd(e.ri,St),_t.vadd(e.rj,_t)):(gt.vsub(e.ni,gt),St.vadd(e.rj,St),_t.vadd(e.ri,_t));const o=1/t;St.scale(o,s.ri),_t.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),gt.normalize(),gt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=ho,a=uo,h=ao,u=lo;for(let d=0,f=t.length;d!==f;d++){const p=t[d],m=e[d];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const w=p.type&M.KINEMATIC&&m.type&M.STATIC||p.type&M.STATIC&&m.type&M.KINEMATIC||p.type&M.KINEMATIC&&m.type&M.KINEMATIC;for(let y=0;y<p.shapes.length;y++){p.quaternion.mult(p.shapeOrientations[y],c),p.quaternion.vmult(p.shapeOffsets[y],h),h.vadd(p.position,h);const x=p.shapes[y];for(let g=0;g<m.shapes.length;g++){m.quaternion.mult(m.shapeOrientations[g],a),m.quaternion.vmult(m.shapeOffsets[g],u),u.vadd(m.position,u);const b=m.shapes[g];if(!(x.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&x.collisionFilterGroup)||h.distanceTo(u)>x.boundingSphereRadius+b.boundingSphereRadius)continue;let B=null;x.material&&b.material&&(B=s.getContactMaterial(x.material,b.material)||null),this.currentContactMaterial=B||v||s.defaultContactMaterial;const z=x.type|b.type,I=this[z];if(I){let q=!1;x.type<b.type?q=I.call(this,x,b,h,u,c,a,p,m,x,b,w):q=I.call(this,b,x,u,h,a,c,m,p,x,b,w),q&&w&&(s.shapeOverlapKeeper.set(x.id,b.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,c,t,e,a,h);n.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(n,d.rj),d.rj.vsub(c.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,h,u){const d=this.createContactEquation(r,c,t,e,a,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(n,Ut),d.ni.scale(d.ni.dot(Ut),Le),Ut.vsub(Le,d.rj),-Ut.dot(d.ni)<=t.radius){if(u)return!0;const f=d.ri,p=d.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool,f=Wo;s.vsub(n,Yt),e.getSideNormals(f,o);const p=t.radius;let m=!1;const v=jo,w=ko,y=Oo;let x=null,g=0,b=0,B=0,z=null;for(let E=0,k=f.length;E!==k&&m===!1;E++){const L=Ro;L.copy(f[E]);const R=L.length();L.normalize();const V=Yt.dot(L);if(V<R+p&&V>0){const H=qo,T=Lo;H.copy(f[(E+1)%3]),T.copy(f[(E+2)%3]);const Z=H.length(),K=T.length();H.normalize(),T.normalize();const Q=Yt.dot(H),Y=Yt.dot(T);if(Q<Z&&Q>-Z&&Y<K&&Y>-K){const $=Math.abs(V-R-p);if((z===null||$<z)&&(z=$,b=Q,B=Y,x=R,v.copy(L),w.copy(H),y.copy(T),g++,u))return!0}}}if(g){m=!0;const E=this.createContactEquation(r,c,t,e,a,h);v.scale(-p,E.ri),E.ni.copy(v),E.ni.negate(E.ni),v.scale(x,v),w.scale(b,w),v.vadd(w,v),y.scale(B,y),v.vadd(y,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),E.rj.vadd(n,E.rj),E.rj.vsub(c.position,E.rj),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult)}let I=d.get();const q=Vo;for(let E=0;E!==2&&!m;E++)for(let k=0;k!==2&&!m;k++)for(let L=0;L!==2&&!m;L++)if(I.set(0,0,0),E?I.vadd(f[0],I):I.vsub(f[0],I),k?I.vadd(f[1],I):I.vsub(f[1],I),L?I.vadd(f[2],I):I.vsub(f[2],I),n.vadd(I,q),q.vsub(s,q),q.lengthSquared()<p*p){if(u)return!0;m=!0;const R=this.createContactEquation(r,c,t,e,a,h);R.ri.copy(q),R.ri.normalize(),R.ni.copy(R.ri),R.ri.scale(p,R.ri),R.rj.copy(I),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}d.release(I),I=null;const N=d.get(),P=d.get(),W=d.get(),A=d.get(),F=d.get(),S=f.length;for(let E=0;E!==S&&!m;E++)for(let k=0;k!==S&&!m;k++)if(E%3!==k%3){f[k].cross(f[E],N),N.normalize(),f[E].vadd(f[k],P),W.copy(s),W.vsub(P,W),W.vsub(n,W);const L=W.dot(N);N.scale(L,A);let R=0;for(;R===E%3||R===k%3;)R++;F.copy(s),F.vsub(A,F),F.vsub(P,F),F.vsub(n,F);const V=Math.abs(L),H=F.length();if(V<f[R].length()&&H<p){if(u)return!0;m=!0;const T=this.createContactEquation(r,c,t,e,a,h);P.vadd(A,T.rj),T.rj.copy(T.rj),F.negate(T.ni),T.ni.normalize(),T.ri.copy(T.rj),T.ri.vadd(n,T.ri),T.ri.vsub(s,T.ri),T.ri.normalize(),T.ri.scale(p,T.ri),T.ri.vadd(s,T.ri),T.ri.vsub(r.position,T.ri),T.rj.vadd(n,T.rj),T.rj.vsub(c.position,T.rj),this.result.push(T),this.createFrictionEquationsFromContact(T,this.frictionResult)}}d.release(N,P,W,A,F)}planeBox(t,e,s,n,i,o,r,c,a,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,h,u,d,f){const p=nr;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,d,f)){const m=[],v=ir;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let y=0;y!==m.length;y++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,a,h),g=x.ri,b=x.rj;p.negate(x.ni),m[y].normal.negate(v),v.scale(m[y].depth,v),m[y].point.vadd(v,g),b.copy(m[y].point),g.vsub(s,g),b.vsub(n,b),g.vadd(s,g),g.vsub(r.position,g),b.vadd(n,b),b.vsub(c.position,b),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool;s.vsub(n,Ho);const f=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let w=!1;for(let y=0;y!==m.length;y++){const x=m[y],g=Yo;o.vmult(x,g),n.vadd(g,g);const b=Uo;if(g.vsub(s,b),b.lengthSquared()<v*v){if(u)return!0;w=!0;const B=this.createContactEquation(r,c,t,e,a,h);B.ri.copy(b),B.ri.normalize(),B.ni.copy(B.ri),B.ri.scale(v,B.ri),g.vsub(n,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(c.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult);return}}for(let y=0,x=p.length;y!==x&&w===!1;y++){const g=f[y],b=p[y],B=Xo;o.vmult(g,B);const z=$o;o.vmult(m[b[0]],z),z.vadd(n,z);const I=Zo;B.scale(-v,I),s.vadd(I,I);const q=Ko;I.vsub(z,q);const N=q.dot(B),P=Qo;if(s.vsub(z,P),N<0&&P.dot(B)>0){const W=[];for(let A=0,F=b.length;A!==F;A++){const S=d.get();o.vmult(m[b[A]],S),n.vadd(S,S),W.push(S)}if(Po(W,B,s)){if(u)return!0;w=!0;const A=this.createContactEquation(r,c,t,e,a,h);B.scale(-v,A.ri),B.negate(A.ni);const F=d.get();B.scale(-N,F);const S=d.get();B.scale(-v,S),s.vsub(n,A.rj),A.rj.vadd(S,A.rj),A.rj.vadd(F,A.rj),A.rj.vadd(n,A.rj),A.rj.vsub(c.position,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),d.release(F),d.release(S),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);for(let E=0,k=W.length;E!==k;E++)d.release(W[E]);return}else for(let A=0;A!==b.length;A++){const F=d.get(),S=d.get();o.vmult(m[b[(A+1)%b.length]],F),o.vmult(m[b[(A+2)%b.length]],S),n.vadd(F,F),n.vadd(S,S);const E=Go;S.vsub(F,E);const k=Do;E.unit(k);const L=d.get(),R=d.get();s.vsub(F,R);const V=R.dot(k);k.scale(V,L),L.vadd(F,L);const H=d.get();if(L.vsub(s,H),V>0&&V*V<E.lengthSquared()&&H.lengthSquared()<v*v){if(u)return!0;const T=this.createContactEquation(r,c,t,e,a,h);L.vsub(n,T.rj),L.vsub(s,T.ni),T.ni.normalize(),T.ni.scale(v,T.ri),T.rj.vadd(n,T.rj),T.rj.vsub(c.position,T.rj),T.ri.vadd(s,T.ri),T.ri.vsub(r.position,T.ri),this.result.push(T),this.createFrictionEquationsFromContact(T,this.frictionResult);for(let Z=0,K=W.length;Z!==K;Z++)d.release(W[Z]);d.release(F),d.release(S),d.release(L),d.release(H),d.release(R);return}d.release(F),d.release(S),d.release(L),d.release(H),d.release(R)}for(let A=0,F=W.length;A!==F;A++)d.release(W[A])}}}planeConvex(t,e,s,n,i,o,r,c,a,h,u){const d=Jo,f=tr;f.set(0,0,1),i.vmult(f,f);let p=0;const m=er;for(let v=0;v!==e.vertices.length;v++)if(d.copy(e.vertices[v]),o.vmult(d,d),n.vadd(d,d),d.vsub(s,m),f.dot(m)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h),x=sr;f.scale(f.dot(m),x),d.vsub(x,x),x.vsub(s,y.ri),y.ni.copy(f),d.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(r.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(c.position,y.rj),this.result.push(y),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=t.radius,p=e.elementSize,m=vr,v=mr;j.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,y=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,g=Math.ceil((v.y+f)/p)+1;if(y<0||g<0||w>d.length||x>d[0].length)return;w<0&&(w=0),y<0&&(y=0),x<0&&(x=0),g<0&&(g=0),w>=d.length&&(w=d.length-1),y>=d.length&&(y=d.length-1),g>=d[0].length&&(g=d[0].length-1),x>=d[0].length&&(x=d[0].length-1);const b=[];e.getRectMinMax(w,x,y,g,b);const B=b[0],z=b[1];if(v.z-f>z||v.z+f<B)return;const I=this.result;for(let q=w;q<y;q++)for(let N=x;N<g;N++){const P=I.length;let W=!1;if(e.getConvexTrianglePillar(q,N,!1),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(W=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&W||(e.getConvexTrianglePillar(q,N,!0),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(W=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&W))return!0;if(I.length-P>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=pr,v=fr,w=ur;j.pointToLocalFrame(n,o,s,w);let y=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,b=Math.ceil((w.y+p)/f)+1;if(x<0||b<0||y>d.length||g>d[0].length)return;y<0&&(y=0),x<0&&(x=0),g<0&&(g=0),b<0&&(b=0),y>=d.length&&(y=d.length-1),x>=d.length&&(x=d.length-1),b>=d[0].length&&(b=d[0].length-1),g>=d[0].length&&(g=d[0].length-1);const B=[];e.getRectMinMax(y,g,x,b,B);const z=B[0],I=B[1];if(!(w.z-p>I||w.z+p<z))for(let q=y;q<x;q++)for(let N=g;N<b;N++){let P=!1;if(e.getConvexTrianglePillar(q,N,!1),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&P||(e.getConvexTrianglePillar(q,N,!0),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&P))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,h,u){const d=ar;if(d.set(0,0,1),n.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,h);d.normalize(),p.rj.copy(d),p.rj.scale(t.radius,p.rj),p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,h,u){const d=or;d.set(0,0,1),r.quaternion.vmult(d,d);const f=rr;if(n.vsub(r.position,f),d.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(c,r,e,t,a,h);m.ni.copy(d),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=cr;d.scale(d.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,h,u){let d=-1;const f=hr,p=dr;let m=null;const v=lr;if(v.copy(n),v.vsub(s,v),i.conjugate(We),We.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,y=t.faces.length;w!==y;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],Ve);const b=-g.dot(Ve);if(m===null||Math.abs(b)<Math.abs(m)){if(u)return!0;m=b,d=w,f.copy(g)}}if(d!==-1){const w=this.createContactEquation(c,r,e,t,a,h);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const y=w.ri,x=w.rj;y.vadd(n,y),y.vsub(c.position,y),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,h,u)}particleCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,h,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=go,f=bo,p=Ao,m=Bo,v=Eo,w=Co,y=Fo,x=xo,g=yo,b=Mo;j.pointToLocalFrame(n,o,s,v);const B=t.radius;y.lowerBound.set(v.x-B,v.y-B,v.z-B),y.upperBound.set(v.x+B,v.y+B,v.z+B),e.getTrianglesInAABB(y,b);const z=wo,I=t.radius*t.radius;for(let A=0;A<b.length;A++)for(let F=0;F<3;F++)if(e.getVertex(e.indices[b[A]*3+F],z),z.vsub(v,g),g.lengthSquared()<=I){if(x.copy(z),j.pointToWorldFrame(n,o,x,z),z.vsub(s,g),u)return!0;let S=this.createContactEquation(r,c,t,e,a,h);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(z),S.rj.vsub(c.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let A=0;A<b.length;A++)for(let F=0;F<3;F++){e.getVertex(e.indices[b[A]*3+F],d),e.getVertex(e.indices[b[A]*3+(F+1)%3],f),f.vsub(d,p),v.vsub(f,w);const S=w.dot(p);v.vsub(d,w);let E=w.dot(p);if(E>0&&S<0&&(v.vsub(d,w),m.copy(p),m.normalize(),E=w.dot(m),m.scale(E,w),w.vadd(d,w),w.distanceTo(v)<t.radius)){if(u)return!0;const L=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(c.position,L.rj),j.vectorToWorldFrame(o,L.ni,L.ni),j.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const q=zo,N=So,P=_o,W=vo;for(let A=0,F=b.length;A!==F;A++){e.getTriangleVertices(b[A],q,N,P),e.getNormal(b[A],W),v.vsub(q,w);let S=w.dot(W);if(W.scale(S,w),v.vsub(w,w),S=w.distanceTo(v),U.pointInTriangle(w,q,N,P)&&S<t.radius){if(u)return!0;let E=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,E.ni),E.ni.normalize(),E.ni.scale(t.radius,E.ri),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(c.position,E.rj),j.vectorToWorldFrame(o,E.ni,E.ni),j.vectorToWorldFrame(o,E.ri,E.ri),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=new l,f=po;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const m=new l;m.copy(d),j.pointToWorldFrame(n,o,m,d);const v=fo;if(d.vsub(s,v),f.dot(v)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h);y.ni.copy(f);const x=mo;f.scale(v.dot(f),x),d.vsub(x,x),y.ri.copy(x),y.ri.vsub(r.position,y.ri),y.rj.copy(d),y.rj.vsub(c.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const gt=new l,St=new l,_t=new l,ao=new l,lo=new l,ho=new D,uo=new D,po=new l,fo=new l,mo=new l,vo=new l,yo=new l;new l;const wo=new l,xo=new l,go=new l,bo=new l,Ao=new l,Bo=new l,Eo=new l,Co=new l,zo=new l,So=new l,_o=new l,Fo=new G,Mo=[],Ut=new l,Le=new l,Io=new l,No=new l,To=new l;function Po(C,t,e){let s=null;const n=C.length;for(let i=0;i!==n;i++){const o=C[i],r=Io;C[(i+1)%n].vsub(o,r);const c=No;r.cross(t,c);const a=To;e.vsub(o,a);const h=c.dot(a);if(s===null||h>0&&s===!0||h<=0&&s===!1){s===null&&(s=h>0);continue}else return!1}return!0}const Yt=new l,Ro=new l,qo=new l,Lo=new l,Wo=[new l,new l,new l,new l,new l,new l],Vo=new l,jo=new l,ko=new l,Oo=new l,Ho=new l,Go=new l,Do=new l,Uo=new l,Yo=new l,Xo=new l,$o=new l,Zo=new l,Ko=new l,Qo=new l;new l;new l;const Jo=new l,tr=new l,er=new l,sr=new l,nr=new l,ir=new l,or=new l,rr=new l,cr=new l,ar=new l,We=new D,lr=new l;new l;const hr=new l,Ve=new l,dr=new l,ur=new l,pr=new l,fr=[0],mr=new l,vr=new l;class je{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const h=s[c];for(;h>n[r];)r++;a=h===n[r],a||ke(t,h)}r=0;for(let c=0;c<o;c++){let a=!1;const h=n[c];for(;h>s[r];)r++;a=s[r]===h,a||ke(e,h)}}}function ke(C,t){C.push((t&4294901760)>>16,t&65535)}const oe=(C,t)=>C<t?`${C}-${t}`:`${t}-${C}`;class yr{constructor(){this.data={keys:[]}}get(t,e){const s=oe(t,e);return this.data[s]}set(t,e,s){const n=oe(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=oe(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class cs extends he{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new He,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new ss,this.constraints=[],this.narrowphase=new rs(this),this.collisionMatrix=new ce,this.collisionMatrixPrevious=new ce,this.bodyOverlapKeeper=new je,this.shapeOverlapKeeper=new je,this.contactmaterials=[],this.contactMaterialTable=new yr,this.defaultMaterial=new Bt("default"),this.defaultContactMaterial=new Pt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof It?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ALL,s.from=t,s.to=e,s.callback=n,re.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ANY,s.from=t,s.to=e,s.result=n,re.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=U.CLOSEST,s.from=t,s.to=e,s.result=n,re.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=X.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=X.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(X.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Ar,n=Br,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,h=this.profile,u=M.DYNAMIC;let d=-1/0;const f=this.constraints,p=br;c.length();const m=c.x,v=c.y,w=c.z;let y=0;for(a&&(d=X.now()),y=0;y!==i;y++){const A=o[y];if(A.type===u){const F=A.force,S=A.mass;F.x+=S*m,F.y+=S*v,F.z+=S*w}}for(let A=0,F=this.subsystems.length;A!==F;A++)this.subsystems[A].update();a&&(d=X.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(h.broadphase=X.now()-d);let x=f.length;for(y=0;y!==x;y++){const A=f[y];if(!A.collideConnected)for(let F=s.length-1;F>=0;F-=1)(A.bodyA===s[F]&&A.bodyB===n[F]||A.bodyB===s[F]&&A.bodyA===n[F])&&(s.splice(F,1),n.splice(F,1))}this.collisionMatrixTick(),a&&(d=X.now());const g=gr,b=e.length;for(y=0;y!==b;y++)g.push(e[y]);e.length=0;const B=this.frictionEquations.length;for(y=0;y!==B;y++)p.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),a&&(h.narrowphase=X.now()-d),a&&(d=X.now()),y=0;y<this.frictionEquations.length;y++)r.addEquation(this.frictionEquations[y]);const z=e.length;for(let A=0;A!==z;A++){const F=e[A],S=F.bi,E=F.bj,k=F.si,L=F.sj;let R;if(S.material&&E.material?R=this.getContactMaterial(S.material,E.material)||this.defaultContactMaterial:R=this.defaultContactMaterial,R.friction,S.material&&E.material&&(S.material.friction>=0&&E.material.friction>=0&&S.material.friction*E.material.friction,S.material.restitution>=0&&E.material.restitution>=0&&(F.restitution=S.material.restitution*E.material.restitution)),r.addEquation(F),S.allowSleep&&S.type===M.DYNAMIC&&S.sleepState===M.SLEEPING&&E.sleepState===M.AWAKE&&E.type!==M.STATIC){const V=E.velocity.lengthSquared()+E.angularVelocity.lengthSquared(),H=E.sleepSpeedLimit**2;V>=H*2&&(S.wakeUpAfterNarrowphase=!0)}if(E.allowSleep&&E.type===M.DYNAMIC&&E.sleepState===M.SLEEPING&&S.sleepState===M.AWAKE&&S.type!==M.STATIC){const V=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),H=S.sleepSpeedLimit**2;V>=H*2&&(E.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,E,!0),this.collisionMatrixPrevious.get(S,E)||(qt.body=E,qt.contact=F,S.dispatchEvent(qt),qt.body=S,E.dispatchEvent(qt)),this.bodyOverlapKeeper.set(S.id,E.id),this.shapeOverlapKeeper.set(k.id,L.id)}for(this.emitContactEvents(),a&&(h.makeContactConstraints=X.now()-d,d=X.now()),y=0;y!==i;y++){const A=o[y];A.wakeUpAfterNarrowphase&&(A.wakeUp(),A.wakeUpAfterNarrowphase=!1)}for(x=f.length,y=0;y!==x;y++){const A=f[y];A.update();for(let F=0,S=A.equations.length;F!==S;F++){const E=A.equations[F];r.addEquation(E)}}r.solve(t,this),a&&(h.solve=X.now()-d),r.removeAllEquations();const I=Math.pow;for(y=0;y!==i;y++){const A=o[y];if(A.type&u){const F=I(1-A.linearDamping,t),S=A.velocity;S.scale(F,S);const E=A.angularVelocity;if(E){const k=I(1-A.angularDamping,t);E.scale(k,E)}}}this.dispatchEvent(xr),a&&(d=X.now());const N=this.stepnumber%(this.quatNormalizeSkip+1)===0,P=this.quatNormalizeFast;for(y=0;y!==i;y++)o[y].integrate(t,N,P);this.clearForces(),this.broadphase.dirty=!0,a&&(h.integrate=X.now()-d),this.stepnumber+=1,this.dispatchEvent(wr);let W=!0;if(this.allowSleep)for(W=!1,y=0;y!==i;y++){const A=o[y];A.sleepTick(this.time),A.sleepState!==M.SLEEPING&&(W=!0)}this.hasActiveBodies=W}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(dt,ut),t){for(let i=0,o=dt.length;i<o;i+=2)Lt.bodyA=this.getBodyById(dt[i]),Lt.bodyB=this.getBodyById(dt[i+1]),this.dispatchEvent(Lt);Lt.bodyA=Lt.bodyB=null}if(e){for(let i=0,o=ut.length;i<o;i+=2)Wt.bodyA=this.getBodyById(ut[i]),Wt.bodyB=this.getBodyById(ut[i+1]),this.dispatchEvent(Wt);Wt.bodyA=Wt.bodyB=null}dt.length=ut.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(dt,ut),s){for(let i=0,o=dt.length;i<o;i+=2){const r=this.getShapeById(dt[i]),c=this.getShapeById(dt[i+1]);pt.shapeA=r,pt.shapeB=c,r&&(pt.bodyA=r.body),c&&(pt.bodyB=c.body),this.dispatchEvent(pt)}pt.bodyA=pt.bodyB=pt.shapeA=pt.shapeB=null}if(n){for(let i=0,o=ut.length;i<o;i+=2){const r=this.getShapeById(ut[i]),c=this.getShapeById(ut[i+1]);ft.shapeA=r,ft.shapeB=c,r&&(ft.bodyA=r.body),c&&(ft.bodyB=c.body),this.dispatchEvent(ft)}ft.bodyA=ft.bodyB=ft.shapeA=ft.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new G;const re=new U,X=globalThis.performance||{};if(!X.now){let C=Date.now();X.timing&&X.timing.navigationStart&&(C=X.timing.navigationStart),X.now=()=>Date.now()-C}new l;const wr={type:"postStep"},xr={type:"preStep"},qt={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},gr=[],br=[],Ar=[],Br=[],dt=[],ut=[],Lt={type:"beginContact",bodyA:null,bodyB:null},Wt={type:"endContact",bodyA:null,bodyB:null},pt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ft={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Er=Object.freeze(Object.defineProperty({__proto__:null,AABB:G,ArrayCollisionMatrix:ce,BODY_SLEEP_STATES:Zt,BODY_TYPES:$t,Body:M,Box:Nt,Broadphase:Kt,COLLISION_TYPES:O,ConeTwistConstraint:Tn,Constraint:Tt,ContactEquation:Mt,ContactMaterial:Pt,ConvexPolyhedron:mt,Cylinder:Ni,DistanceConstraint:Pn,Equation:vt,EventTarget:he,FrictionEquation:le,GSSolver:ss,GridBroadphase:Qs,Heightfield:Pi,HingeConstraint:Qe,JacobianElement:ae,LockConstraint:Rn,Mat3:tt,Material:Bt,NaiveBroadphase:He,Narrowphase:rs,ObjectCollisionMatrix:Cs,Particle:Ti,Plane:es,PointToPointConstraint:te,Pool:is,Quaternion:D,RAY_MODES:Qt,Ray:U,RaycastResult:It,RaycastVehicle:ti,RigidVehicle:Bi,RotationalEquation:At,RotationalMotorEquation:Ke,SAPBroadphase:Ft,SHAPE_TYPES:Oe,SPHSystem:Ei,Shape:_,Solver:de,Sphere:ts,SplitSolver:to,Spring:On,Transform:j,Trimesh:Xt,Vec3:l,Vec3Pool:os,WheelInfo:Je,World:cs},Symbol.toStringTag,{value:"Module"}));const Cr={__name:"cannon",setup(C){console.log(Er),new ws;let t=gs(null);const e=new as,s=new ls(75,window.innerWidth/window.innerHeight,.1,300);s.position.set(0,0,18),e.add(s);const n=[],i=new Bt("cube");function o(){const B=new vs(1,1,1),z=new fe,I=new pe(B,z);I.castShadow=!0,e.add(I);const q=new Nt(new l(.5,.5,.5)),N=new M({shape:q,position:new l(0,0,0),mass:1,material:i});N.applyLocalForce(new l(300,0,0),new l(0,0,0)),c.addBody(N);function P(W){W.contact.getImpactVelocityAlongNormal()>2&&(a.currentTime=0,a.play())}N.addEventListener("collide",P),n.push({mesh:I,body:N})}window.addEventListener("click",o);const r=new pe(new hs(20,20),new fe);r.position.set(0,-5,0),r.rotation.x=-Math.PI/2,r.receiveShadow=!0,e.add(r);const c=new cs;c.gravity.set(0,-9.8,0);const a=new Audio("/metalHit.mp3"),h=new es,u=new M,d=new Bt("floor");u.material=d,u.mass=0,u.addShape(h),u.position.set(0,-5,0),u.quaternion.setFromAxisAngle(new l(1,0,0),-Math.PI/2),c.addBody(u);const f=new Pt(i,d,{friction:.1,restitution:.7});c.addContactMaterial(f),c.defaultContactMaterial=f;const p=new ds(16777215,.5);e.add(p);const m=new us(16777215,.5);m.castShadow=!0,e.add(m);const v=new ps({alpha:!0});v.setSize(window.innerWidth,window.innerHeight),v.shadowMap.enabled=!0;const w=new fs(s,v.domElement);w.enableDamping=!0;const y=new ms(5);e.add(y);const x=new ys;function g(){let B=x.getDelta();c.step(1/120,B),n.forEach(z=>{z.mesh.position.copy(z.body.position),z.mesh.quaternion.copy(z.body.quaternion)}),v.render(e,s),requestAnimationFrame(g)}g();const b=B=>{s.aspect=window.innerWidth/window.innerHeight,s.updateProjectionMatrix(),v.setSize(window.innerWidth,window.innerHeight),v.setPixelRatio(window.devicePixelRatio)};return bs(()=>{t.value.appendChild(v.domElement),g(),window.addEventListener("resize",b)}),As(()=>{window.removeEventListener("resize",b)}),(B,z)=>(Bs(),Es("div",{class:"test",ref_key:"el",ref:t},null,512))}},Fr=xs(Cr,[["__scopeId","data-v-823ab4c3"]]);export{Fr as default};
